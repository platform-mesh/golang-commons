// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/openfga/api/proto/openfga/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewFGAStoreHelper creates a new instance of FGAStoreHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFGAStoreHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *FGAStoreHelper {
	mock := &FGAStoreHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FGAStoreHelper is an autogenerated mock type for the FGAStoreHelper type
type FGAStoreHelper struct {
	mock.Mock
}

type FGAStoreHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *FGAStoreHelper) EXPECT() *FGAStoreHelper_Expecter {
	return &FGAStoreHelper_Expecter{mock: &_m.Mock}
}

// GetModelIDForTenant provides a mock function for the type FGAStoreHelper
func (_mock *FGAStoreHelper) GetModelIDForTenant(ctx context.Context, conn openfgav1.OpenFGAServiceClient, tenantID string) (string, error) {
	ret := _mock.Called(ctx, conn, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetModelIDForTenant")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openfgav1.OpenFGAServiceClient, string) (string, error)); ok {
		return returnFunc(ctx, conn, tenantID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openfgav1.OpenFGAServiceClient, string) string); ok {
		r0 = returnFunc(ctx, conn, tenantID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openfgav1.OpenFGAServiceClient, string) error); ok {
		r1 = returnFunc(ctx, conn, tenantID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FGAStoreHelper_GetModelIDForTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelIDForTenant'
type FGAStoreHelper_GetModelIDForTenant_Call struct {
	*mock.Call
}

// GetModelIDForTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - conn openfgav1.OpenFGAServiceClient
//   - tenantID string
func (_e *FGAStoreHelper_Expecter) GetModelIDForTenant(ctx interface{}, conn interface{}, tenantID interface{}) *FGAStoreHelper_GetModelIDForTenant_Call {
	return &FGAStoreHelper_GetModelIDForTenant_Call{Call: _e.mock.On("GetModelIDForTenant", ctx, conn, tenantID)}
}

func (_c *FGAStoreHelper_GetModelIDForTenant_Call) Run(run func(ctx context.Context, conn openfgav1.OpenFGAServiceClient, tenantID string)) *FGAStoreHelper_GetModelIDForTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openfgav1.OpenFGAServiceClient
		if args[1] != nil {
			arg1 = args[1].(openfgav1.OpenFGAServiceClient)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FGAStoreHelper_GetModelIDForTenant_Call) Return(s string, err error) *FGAStoreHelper_GetModelIDForTenant_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *FGAStoreHelper_GetModelIDForTenant_Call) RunAndReturn(run func(ctx context.Context, conn openfgav1.OpenFGAServiceClient, tenantID string) (string, error)) *FGAStoreHelper_GetModelIDForTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIDForTenant provides a mock function for the type FGAStoreHelper
func (_mock *FGAStoreHelper) GetStoreIDForTenant(ctx context.Context, conn openfgav1.OpenFGAServiceClient, tenantID string) (string, error) {
	ret := _mock.Called(ctx, conn, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIDForTenant")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openfgav1.OpenFGAServiceClient, string) (string, error)); ok {
		return returnFunc(ctx, conn, tenantID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openfgav1.OpenFGAServiceClient, string) string); ok {
		r0 = returnFunc(ctx, conn, tenantID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openfgav1.OpenFGAServiceClient, string) error); ok {
		r1 = returnFunc(ctx, conn, tenantID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FGAStoreHelper_GetStoreIDForTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIDForTenant'
type FGAStoreHelper_GetStoreIDForTenant_Call struct {
	*mock.Call
}

// GetStoreIDForTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - conn openfgav1.OpenFGAServiceClient
//   - tenantID string
func (_e *FGAStoreHelper_Expecter) GetStoreIDForTenant(ctx interface{}, conn interface{}, tenantID interface{}) *FGAStoreHelper_GetStoreIDForTenant_Call {
	return &FGAStoreHelper_GetStoreIDForTenant_Call{Call: _e.mock.On("GetStoreIDForTenant", ctx, conn, tenantID)}
}

func (_c *FGAStoreHelper_GetStoreIDForTenant_Call) Run(run func(ctx context.Context, conn openfgav1.OpenFGAServiceClient, tenantID string)) *FGAStoreHelper_GetStoreIDForTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openfgav1.OpenFGAServiceClient
		if args[1] != nil {
			arg1 = args[1].(openfgav1.OpenFGAServiceClient)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FGAStoreHelper_GetStoreIDForTenant_Call) Return(s string, err error) *FGAStoreHelper_GetStoreIDForTenant_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *FGAStoreHelper_GetStoreIDForTenant_Call) RunAndReturn(run func(ctx context.Context, conn openfgav1.OpenFGAServiceClient, tenantID string) (string, error)) *FGAStoreHelper_GetStoreIDForTenant_Call {
	_c.Call.Return(run)
	return _c
}

// IsDuplicateWriteError provides a mock function for the type FGAStoreHelper
func (_mock *FGAStoreHelper) IsDuplicateWriteError(err error) bool {
	ret := _mock.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsDuplicateWriteError")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(error) bool); ok {
		r0 = returnFunc(err)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// FGAStoreHelper_IsDuplicateWriteError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDuplicateWriteError'
type FGAStoreHelper_IsDuplicateWriteError_Call struct {
	*mock.Call
}

// IsDuplicateWriteError is a helper method to define mock.On call
//   - err error
func (_e *FGAStoreHelper_Expecter) IsDuplicateWriteError(err interface{}) *FGAStoreHelper_IsDuplicateWriteError_Call {
	return &FGAStoreHelper_IsDuplicateWriteError_Call{Call: _e.mock.On("IsDuplicateWriteError", err)}
}

func (_c *FGAStoreHelper_IsDuplicateWriteError_Call) Run(run func(err error)) *FGAStoreHelper_IsDuplicateWriteError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FGAStoreHelper_IsDuplicateWriteError_Call) Return(b bool) *FGAStoreHelper_IsDuplicateWriteError_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *FGAStoreHelper_IsDuplicateWriteError_Call) RunAndReturn(run func(err error) bool) *FGAStoreHelper_IsDuplicateWriteError_Call {
	_c.Call.Return(run)
	return _c
}
