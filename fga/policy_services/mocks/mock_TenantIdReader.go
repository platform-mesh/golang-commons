// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewTenantIdReader creates a new instance of TenantIdReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantIdReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantIdReader {
	mock := &TenantIdReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TenantIdReader is an autogenerated mock type for the TenantIdReader type
type TenantIdReader struct {
	mock.Mock
}

type TenantIdReader_Expecter struct {
	mock *mock.Mock
}

func (_m *TenantIdReader) EXPECT() *TenantIdReader_Expecter {
	return &TenantIdReader_Expecter{mock: &_m.Mock}
}

// Read provides a mock function for the type TenantIdReader
func (_mock *TenantIdReader) Read(parentCtx context.Context) (string, error) {
	ret := _mock.Called(parentCtx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(parentCtx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(parentCtx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(parentCtx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TenantIdReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type TenantIdReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - parentCtx
func (_e *TenantIdReader_Expecter) Read(parentCtx interface{}) *TenantIdReader_Read_Call {
	return &TenantIdReader_Read_Call{Call: _e.mock.On("Read", parentCtx)}
}

func (_c *TenantIdReader_Read_Call) Run(run func(parentCtx context.Context)) *TenantIdReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TenantIdReader_Read_Call) Return(s string, err error) *TenantIdReader_Read_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *TenantIdReader_Read_Call) RunAndReturn(run func(parentCtx context.Context) (string, error)) *TenantIdReader_Read_Call {
	_c.Call.Return(run)
	return _c
}
